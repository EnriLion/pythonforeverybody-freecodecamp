--Collection-

-What is a collection?

*A collection is nice because we can put more than one value in it and carry them all around in one convenient package

*We have a bunch of values in a single "variable"

*We do this by having more than one place "in" the variable

*We have ways of finding the different places in the variable


-What is not a "Collection"?

*Most of our "variables" have one value in them - when we put a new value in the "variable" - the old values is overwritten

$ python

x = 2

x = 4

print(x)

-A Story of Two Collections-

*List
   *A linear collection of values that say in order ( like pringles)
*Dictionary
   *A "bag" of values, each with its own label ( its messy like a wallet)

-Dictionaries- http://en.wikipedia.org/wiki/Associative_array

Dictionaries are like if we put in each thing stickers 

*Is like a bagpack but you have label them

-Dictionaries-

*Dictionaries are Python's most powrful data collection

*Dictionaries allow us to do fast database-like operations in Python

*Dictionaries have different names in different languages

	*Associate Arrays - Perl/PHP

	*Properties or Map or HashMap - Java

	*Property Bag - C#/.Net

*Lists "index" their entries based on the position in the list

*"Dictionaries" are like bags - no order

*So we "index" the things we put in the "dictionary with a "lookup tag"

 
purse = dict()
purse['money'] = 12 ->money(12)
purse['candy'] = 3->candy(3)
purse['tissues'] = 75-> tissues(75)
print(purse)
print(purse['candy'])

purse['candy'] = purse['candy'] + 2 -> make 3 to 5 in candy
print(purse)

/////////////////////////////////////
 
{'tissues': 75, 'candy': 3, 'money': 12}
3
{'tissues': 75, 'candy': 5, 'money': 12}

-Comparing Lists and Dictionaries-

*"Dictionaries" are like "lists" except tha they use "keys" instead of numbers to look up "values"



print('\n','Lists')
lst = list()
lst.append(21)
lst.append(183)
print(lst)
lst[0] = 23
print(lst)

print('\n','Dictionaries')
ddd = dict()
ddd['age'] = 21
ddd['course'] = 182
print(ddd)
ddd['age'] = 23
print(ddd)

//////////////////////////////////

    List

Key  Value

[0]  21

[1]  183

    Dictionary

Key        Value

['course'] 182  
                       ddd
['age']    21


-Dictionary Literas(Constants)-

*Dictionary literals use curly braces and have a list of key: value pairs

*You can make an "empty dictionary" using empty curly braces

--Dictionary Literals (Constants)-

*Dictionary literals use curly braces and have a lis tof key: value pairs

*You can make an "empty dictionary" using empty curl braces

jjj = {'chuck' : 1,  'fred' : 42, 'jan' : 100}
print(jjj)

ooo= { } #to put the curly braces is shortuc to call the variable dict()
print(ooo)

--Counting--

--Most Common Name?-

-Counting an histagram/ how many times happened.

-one piece of data at the time and in each time in every content to starting in time.

What is the common name?

marquard cwen cwen
 zhen  marquard zhen

csev  zhen csev
           marquard
zhen csev  zhen

*For humans is easy and you put in a pper and make takemarks and is have to be done

*And that is how we are going to use dictionaries to do that

-Many-Counters-with-a-Dictionary-

One common use of dictionaries is "counting" how often we "see" something



ccc = dict()
ccc['csev'] = 1
ccc['cwen'] = 1
print(ccc)

ccc['cwen'] = ccc['cwen'] + 1

print(ccc)

//////////////////////

key    value

csev  III
cwen  II

*We could extend the dictionary by adding more numbers

-Dictionary-TRacebacks-

* It is an "error" to reference a key which is not in the dictionary 

*We can use the "in" operator to see if a key is in the dictionary

ccc = dict() --> 

print(ccc['csev']) --> blows operator

'csev' in ccc --> if csev is in ccc as result is False and we could avoid the traceback

-When we see a new name--

*When we encounter a new name, we need to add a new entry in the "dictionary" and if this the second or later time we have seen the "name", we simply add one to the count in the "dictionary" under that "name"


counts = dict() 
names = ['csev', 'cwen', 'csev', 'zqian', 'cwen']
for name in names: --> loop through all the list
    if name not in counts: --> if the name is not in the dictionary already is going to set and be 1
        counts[name] = 1
    else: -> if not --> will got the old value and counts the name and will add 1 to it
        counts[name] = counts[name] + 1
print(counts) --> and the end of the loop we have the count dictionary or the histogram we are looking for.

/////////////////////////////

{'csev': 2, 'zqian': 1, 'cwen': 2}

-The "get" method for dictionaries-

The pattern of checking to see if a "key" is already in a dictionary and assuming a default value if the "key" is not there is so common that there is a "method" called "get()" that does this for us

Default value if key does not exist (and no Traceback)

