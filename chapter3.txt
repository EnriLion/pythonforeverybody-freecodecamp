--Conditional Execution --
--Conditional Steps --
Program:

x = 5

if x < 10:
    print('Smaller')
if x > 20:
    print('Bigger')

print('Finis')
/////////////////////////

Smaller

Finis

--Comparison Operators--

*Boolean expressions ask a question and produce Yes or No result which we use to control program flow

*Boolean exoressions using comprasion operators evaluate to True/ False or Yes / No

*Comparison operators look at variables but do not change the variables



Python   | Meaning
-------------------------
   <     | Less than 
-------------------------
   <=    | Less than or Equal to 
-------------------------
   ==    | Equal to  
-------------------------
   >=    | Greater than or Equal to 
-------------------------
   >     | Greater than
-------------------------
   !=    | Not equal 
-------------------------

= -> is used for assignment

-One-Way Decisions-

x = 5

print('Before 5')
if x == 5:
   print('Is 5')
   print('Is Still 5')
   print('Third 5')
print('Aftwerwards 5')
print('Before 6')
if x == 6:
   print('Is 6')
   print('Is Still 6')
   print('Third 6')
print('Aftwerwards 5')


-Indentation->'python(syntaxis need to be correct)'-

*Increase indent- infent after an if statement or for statement(after :)

*Maintain indent- to indicate the "scope" of the block(which lines are affected by the if/for)

*Reduce indent- back to the level of the "if" statement or "for" statement to indicate the end of the block

*Blank lines- are ignored-they do not affect "identation"

*Comments- on a line by themselves are ignored with regard to "identation"

-Warning: Turn Off Tabs!-

*Atom automatically uses spaces for files with ".py"

*Most text editors can turn tabs into spaces - make sure to enable this feature

**Python cares a "lot" about how far a line is indented. If you mix tabs and spaces, you may get "indentation errors" even if everyrhing looks fine

Example

-Think about begin/end blocks-

increase -->
maintain ->
(after if or for)
decrease <-
(to indicate end of block)

->i x=5
->if x > 2 :
  -->print('Bigger than 2')
   ->print('Still bigger')
<-print('Done with 2')

->for i in range(5) :
   -->print(i)
    ->if i > 2 :
      -->print('Bigger than 2')
   <-print('Done with i', i)
<-print('All Done')

-Nested-Decisions-

x = 42
if x > 1 :
    print('More than one')
    if x < 100 :
        print('Less than 100')
print('All done')

-Two-way-Decisions-with-else-

x = 4

if x > 2 :
    print('Bigger')
else :
    print('Smaller')

print 'All done'

--More-Conditional-Structures--

-Multi-way-

if x < 2 :
   print('small')
elif x < 10 :
   print('Medium')
else :
   print('LARGE')
print('All done')

#No Else multi-way

x = 5
if x < 2 :
   print('Small')
elif x < 10 :
   print('Medium')

print 'All done'

or...

if x < 2 :
   print('Small')
elif x < 10 :
   print('Medium')
elif x < 20 :
   print('Big')
elif x < 40 :
   print('Large')
elif x < 100 :
   print('Huge')
else :
   print('Ginromous')

#Multi-way Puzzles

if x < 2 :
   print('below 2')
elif x >= 2 :
   print('Two or more')
else :
   print('something else')

#another example

if x < 2 :
   print('Below 2')
elif x < 20 :
   print('Below ')
elif x < 10 :
   print('Below 10')
else :
   print('Something else')

-The-try/except-Structure-

*You surround a dangerous section of code with try and except 

*If the code in the try works - the except is skipped

*If the code in the try fails - it jumps to the excpet section

*A traceback is a report conatianing the function calls made in your code at a specific point.

-The-try/except-Structure-
astr = 'Hello Bob'
try :
  istr = int(astr)
except :
  istr = -1

print('First', istr)

#another example

astr = '123'

try :
  istr = int(astr)
except :
  istr = -1

print('Second', istr)

//////////////////////

python3 tryexcept.py

First -1

Second 123


//////////////////////

python3 tryexcept.py

First -1

Second 123

#Dont overuse the try/except 

astr = 'Bob'
try :
  print('Hello') -> This are going to work but is inside in the try where the mistake will be given so is not going to print anything
  istr = int(astr) --> This is the mistake could transform string to int
  print('There') ---> This are not going to execute
except :
  istr = int(asstr)

print('Done', istr)

#This is a common real word example:

rawstr: input('Enter a number: ')

try :
  ival = int(rawstr)
except :
  ival = -1

if ival > 0 :
   print('Nice work')
else :
   print('Not a number')

//////////////////////////////

python3 trynum.py
Enter a number:42
Nice work
 

python3 trynum.py
Enter a number:forty-two --> normally will be see a traceback.
Not a number

Summary of the chapter 3

*Comparison operators

== <= >= > < ! =

*Intendation

*One-way Decicions

*Two-way decisions:
if : and else :

*Nested Decisions

*Multi-way decision using elif

* try / except to compensate for errors




