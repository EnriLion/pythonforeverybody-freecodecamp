---Loops-and-Iterations---

#Be good in loops and iterations-

--Repeated Steps--

n = 5

while n > 0 :
      print(n)
      n = n - 1
print('Blastoff!')
print(n)

//////////////////////
5
4
3
2
1
Blastoff!
0

*Loops(repeated steps) have iterations variables that change each time through a loop. Often these iteration variables go through a sequence of numbers.

--An Infinite Loop--

n = 5
while n > 0 :
      print('Lather')
      print('Rinse')
print('Dry off!')

///////////////////
Lather
Rinse
Lather
Rinse
Lather
Rinse
...
*The iteration variable is the same so there is no way could get out of the loop


n = 0
while n > 0 :
      print('Lather')
      print('Rinse')
print('Dry off!')

//////////////////////
Dryoff!

*The iteration variable is the same so there is no way could get out of the loop

--Breaking-out-of-a-loop--

*The break statement ends the current loop and jumps to the statement immediately following the loop

*It is like a loop test that cna happen anywhere in the body of the loop

while True:
    line = input('> ')
    if line == 'done' :
	break
    print(line)
print('Done!')
///////////////////////

> hello there
hello there
> finished
finished
> done
Done!


--Finisihing-an-Iteration-with-continue--

The continue statement ends the current iteration and jumps to the top of the loop and starts the next iteration

   
while True:
    line = input('> ')
    if line[0] == '#' :
        continue
    if line == 'done' :
        break
    print(line)
print('Done!')
///////////////////////////

> hello there
hello there
> # don't print this
> print this!
print this!
> done
Done!

another example....


--Indefinite-Loops--

*While loops are called "indefinite loops" because they keep going until a logical condition becomes False

*Sometimes it is a little harder to be sure if a loop will terminate

*The loops we have seen so far are pretty easy to examine to see if they will terminate or if they will be "infinite loops"



--Definite-Loops--

*Quite often we have a list of items of the lines in a life - effectively a finite set of things

*We can write a loop to run the loop once for each of the items in a set using the Python for construct

*These loops arew called "definite loops" because they execute an exact number of times

*We say that "definite loops iterate through the members of a set"

-A-Simple-Definite-Loop-

for i in [5, 4, 3, 2, 1] :
    print(i)
print('Blastoff!')

///////////////////////////
5
4
3
2
1
Blastoff!

-A-Definite-Loop-with-Strings-


print("A Definite Loop with Strings")

friends = ['Joseph', 'Glenn', 'Sally'] --> Array of strings
for friends in friends :
    print('Happy New Year:', friend)
print('Done!')

--Loops Idions--

Are patterns to all kinds of loops


--Making"smart"loops--

*The trick is "knowing" something about the whole loop when you are stuck writing code that only sees one entry at a time.

*Set some variables to initial values

for thing in data:

*Look for something or do something to each entry separately, updating a variable

*Look at the variables

t=t+1

--Looping through a Set--


print("Looping through a Set")

print('Before')
for thing in [9, 41, 12, 3, 74, 15] :
    print(thing)
print('After')

//////////////////////////
$python basicloop.py
Before
9
41
12
3
74
15
After

-What-is-the-Largest-number-?-

 3 41 12 9 74*

*We could create a variable name largest_so_far

largest_so_fat = -1

3 

largest_so_fat = 41

 3 41 

largest_so_fat = 41

 3 41 12 9 

largest_so_fat = 74

 3 41 12 9 74*

-Finding-the-largest-value-

largest_so_far = -1     
print("Before", largest_so_far)
for the_num in [9, 41, 12, 3, 74, 15] :
    if the_num  > largest_so_far :
        largest_so_far = the_num
    print(largest_so_far, the_num)
print("After", largest_so_far)

/////////////////////////
$python largest.py
Before -1
9 9
41 41
41 12
41 3
41 3
74 74
74 15
After 74

*We make a variable that contains the largest we have seen so far. If the current number we are looking at is larger, it is the new largest value we have seen so far.


--More-Loop-Patterns--

-Counting-in-a-Loop-

zork = 0

print('Before', zork)
for thing in [9, 41, 12, 3, 74, 15] :
    zork = zork + 1
    print(zork, thing)
print('After', zork)

//////////////////////
$python countloop.py
Before 0
1 9
2 41
3 12
4 3
5 74 
6 15
After 6

*The "count" how many times we execute a loop, we introduce a counter variable that starts at 0 and we add one to it each time through the loop


-Summing-in-a-loop-

zork = 0

print('Before', zork)
for thing in [9, 41, 12, 3, 74, 15] :
    zork = zork + thing
    print(zork, thing)
print('After', zork)

///////////////////////////////
$python countloop.py
Before 0
9 9 
50 41
62 12
65 3
139 74
154 15
After 154

*To add up a value we encounter in a loop, we introduce a sum variable that starts at 0 and we add the value to the sum each time through the loop.


-Finding-the-average-in-a-loop-

count = 0
sum = 0
print('Before', count, sum)
for value in [9, 41, 12, 3, 74, 15] :
    count = count + 1
    sum = sum + value
    print(count, sum, value)
print('After', count, sum, sum /count)


///////////////////////////////
$python averageloop.py
Before 0 0
1 9 9 
2 50 41
3 62 12
4 65 3
5 139 74
6 154 15
After 6 154 25.666

*An "average" just combines the "counting" and "sum" patternd and "divides when the loop is done"


-Filtering-in-a-Loop-

for value in [9, 41, 12, 3, 74, 15] :
    if value > 20 :
        print('Large number', value)
print('After')

//////////////////////////////////
$python search1.py
Before
Large number 41
Large number 74
After

*We use an if statement in the loop to catch / filter the values we are looking for.


-Searching-using-a-boolean-variable-


print('Filtering in a Loop')

found = False
print('Before', found)
for value in [9, 41, 12, 3, 74, 15] :
    if value == 3 :
        found = True
    print(found, value)

*If we just want to search and know if a value was found, we use a variable that starts at False and is set to True as soon as we find what we are looking for.

-Finding-the-smallest-value-


smallest = None
print('Before')
for value in [9, 41, 12, 3, 74, 15] :
    if  smallest is None : 
        smallest = value
    elif value < smallest :
        smallest = value
    print(smallest, value)
print('After', smallest)

///////////////////////////////////

Before
9 9
9 41
9 12
3 3
3 74
3 15
After 3

*Python has an "is" operator that cna be used in logical expressions

*Implies "is the same as"

*Similar to, but stronger than ==

*is not also is a logical operator

0 == 0.0
0 is 0.0 -> demands the value of the variable  and the meaning of the value as well "Don't overuse it" use sternly don't use as float no integers and none as stringsor True/False

*Summary*

*While loops(indefinite)

*Infinte loops

*Using break

*Using break

*Using continue

*None constants and variables

*Foor loops (definite)

*Iteration variables

*Loop idioms

*Largest or smallest
