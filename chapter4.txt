---Functions---

--Stored-(and reused) Steps--

def thing() --> like a macro stored our data
  print('Hello')
  print('Fun')


thing()
print('Zip')
thing()

/////////////////////

Hello
Fun
Zip
Hello
Fun

--Python Functions--

*There are two kinds of functions in Python

 *Built-in functions that are provided as part of Python
  print(),input(),type(),float(), int() ...

 *Functions that we define ourselves and then use - like "def"

*We treat the built-in function names as "new" reserverd words (i.e, we avoid them as variable names)

--Function Definition--

*In Python a function is some reusable code that takes arguments(s) as input, does come computation, and then return as result or results

*We define a function using the def reserved word

*We call/invoke the function by using the function name parentheses, and arguments in an expression

//In here there is an example of a function

big = max('Hello world')

big --> assignment

max --> 'w' --> Result

Hello world --> Argument

/////////////////
>>> big = max('Hello world')
>>> print(big)
w
>>> tiny = min('Hello world') 
>>> print(tiny)

>>>

min()= The function min look the smalles data that is in a string in this occassion the space between Hello and world is storage and when is prited literally shows the space as nothing

max()=The function max look the highest data that is in a string in this occassion shows the letter w

--Max-Funcion--

>> big = max('Hello world')
>> print(big)
w

#Someone created a max function for use and is a built-in function (See deeper this function and how they made it)

--Type-conversions--

*When you put an integer and floating point in an expression, the integer is implicitly converted to a float

*You can control this with the built-in functions int() and float()

>>> print float(99) / 100
0.99
>>> i = 42
>>> type(i)
<class 'int'>
>>> f = float(i)
>>> print(f)
42.0
>>> type(f)
<class 'float'>
>>> print(1 + 2 * float(3) / 4 - 5)
-2.5
>>>

--String-Conversions--

*You can also use int() and float() to convert between strings and integers

*Youwill get an error if the string does not contain numeric characters

>>> sval = '123'
>>> type(sval)
<class 'str'>
>>> print(sval +1)
Traceback ...
>>> ival = int(sval)
>>> type(ival)
<class 'int'>
>>> print(ival + 1)
1234
>>> nsv = 'hello bob'
>>> niv = int(nsv)
Traceback...

--Functios of our own--

*We create a new function using the def keyword followed by optimal parameters in parentheses

*We indent the body of the function

*This defines the function but does not execute the body of the function

 def print_lyrics():
     print("I'm a lumberjack, and I'm okay okay.")
     print("I sleep all night and I work all day.")

#Another example

x = 5
print('Hello')


 def print_lyrics():
     print("I'm a lumberjack, and I'm okay okay.")
     print("I sleep all night and I work all day.")

print('Yo')
x = x + 2
print(x)

////////////////////////////7

Hello
Yo
7

#The function never are going to run unless we invoke it

--Definitions and uses--

*Once we have defined a function, we can call(or invoke) it as many times as we like

*This is the store and reuse patter

x = 5
print('Hello')


 def print_lyrics():
     print("I'm a lumberjack, and I'm okay okay.")
     print("I sleep all night and I work all day.")

print('Yo')
print_lyrics()
x = x + 2
print(x)

//////////////////////////
Hello
Yo
I'm a lumberjack, and I'm okay okay.
I sleep all night and I work all day.
7

--Arguments--

*An argument is a value we pass into the function as its input when we call the function

*We use argumnts so we can direct the function to do different kinds of work when we call it a different times

*We put the arguments in parentheses after the name of the function

big = max("Hello world")

Hello world = argument

--Parameters--

A parameter is a variable which we use in the function definition. It is a "handle" that allows the code in the function to access the arguments for a particular invocation.

>>> def greet(lang) :
    if lang == 'es' :
       print('Hola')
    elif lang == 'fr' :
       print('Bonjour')
    else :
       print('Hello')

/////////////////////
>>> greet('en')
Hello
>>> greet('es')
Hola
>>> greet('fr')
Bonjour
>>>

#The lang variable in the function definition is like a placeholder that we attach and technically is our parameter

--Return Values--

Often a function will take its arguments, do some computation, and return a value to be used as the value of the function call in the calling expression. The return keyword is used for this.

def greet() :
    return "Hello"

print( greet(), "Glenn")
print( greet(), "Sally")

//////////////////////////
Hello Glenn
Hello Sally

#python could take the value of return like a parameter andit will stop the execution of the function can like a "break" for a loop and its also allows the especification as a receive value of an expression

*A "fruitful" function is one that produces a result(or a return value)

*The return statement ends the function execution and "sends back" the result of the function

>>> def greet(lang) :
        if lang == 'es' :
           return 'Hola'
        elif lang == 'fr' :
           return 'Bonjour'
        else:
           return 'Hello'
///////////////////
>>> print(greet('en'), 'Gleen')
Hello Gleen
>>> print(greet('es'), 'Sally')
Hola Sally
>>> print(greet('fr'), 'Michael')
Bonjour Michale
>>>

--Multiple-Parameters/Arguments--

*We can define than one parameter in the function definition

*We simply add more arguments when we call the function

*We match the number and order of arguments and parameters

def addtwo(a, b):
    added = a + b
    return added

x = addtwo(3, 5)
print(x)


*Action parameters later?

--Void(non-fruiiful)Functions--

*When a function does not return a value, we call it a "void" function

*Functions that return values are "fruitful" functions

*Void functions are "not fruitful"

--To-function-or-not-to-function...--

*Organize your code into "paragraphs" - capture a complete thoguht and "name it"

*Don't repeat youself - make it work once and then reuse it

*If something gets too long or complex,break it up into logical chunks and put those chunks in functions

*Make a library of common stuff that you do over and over - perhaps share this with your friends...

##No is like scripting no is about writing functions or making arrays, only if we are tired to do the same probably could make a function

--Summary-of-the-chapter--

*Arguments

*Results (fruitful functions)

*Void(non-fruitful)functions

*Why use functions?

*Functions

*Built-In Functions

*Type conversion(int, float)

*String conversions

*Parameters



