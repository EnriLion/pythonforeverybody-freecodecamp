--Lists--

*Programming
 *Algorithms
	* A set of stepts used to solve a problem
 *Data Structures
	* A particular way of organizing data in a computer

*Data structures - clever way that the data does what you want to do.


-What-is-not-a-"collection"-

Most of our "variables" have one value in them - when we put a new value in the "variable", the old value is overwritten

$python

>>> x = 2
>>> x = 4
>>> print(x)
4

-A-list-is-a-kind-of-collection-

*A "collection" allows us to put many values in a single "varible"

*A "collection" is nice because we can carry all "many values" around in one convenient package.

friends = [ 'Joseph', 'Glenn', 'Sally' ] --> list as constans asign it into a variable


carryon = [ 'socks', 'shirt', 'perfume' ]


a collection is like a storage


-List-Constants-

*"List" constants are surrounded by square brackets and teh elements in the list are separated by commaas.


*A "list" element can be any Python object - even "another list"

*A "list" can be empty 


print([1, 24, 76])
print(['red', 'yellow', 'blue'])
print(['red', 24, 98.6])
print([ 1, [5,6], 7])
print([])

///////////////////
[1, 24, 76]
['red', 'yellow', 'blue'])
['red', 24, 98.6])
[ 1, [5,6], 7])
[]

-We already use lists!-

for i in [5, 4, 3, 2, 1] : --> we are using list inside the loop through lists
    print(i)
print('Blastoff!')

/////////////////////////
5
4
3
2
1
Blastoff!

-List-and-definite-loops-best-pals-


friends = ['Joseph', 'Glenn', 'Sally']
for friend in friends : --> this are arbitrary comprensions due to could be confusinng -> thats is why is better the below example
    print('Happy New Year:', friend)
print('Done!')

z = ['Joseph', 'Glenn', 'Sally']
for x in z:
    print('Happy New Year:', x)
print('Done!')

//////////////////////////

Happy New Year: Joseph
Happy New Year: Glenn
Happy New Year: Sally
Done!

-Looking-inside-Lists-

*Just like strings, we can get at any single element in a list using an index specified in "square brackets"

[Joseph][Glenn][Sally]
   0       1      2

friends = ['Joseph', 'Glenn', 'Sally']
print(friends[1]) --> friends/friends no matter if is singular or plurarl could be confusing

///////////////////
Glenn

-Lists-are-Mutable-

*Strings are "immutable" - we cannot change the contents of a string- we must make a "new string" to make any change

*Lists are "mutable" - we can "change" an element of a list using the "index" operator

>>> fruit = 'Banana'
>>> fruit[0] = 'b'
>>> x = fruit.lower() -- the method change the variable string 
>>> print(x)
>>> lotto = [2, 14, 26, 41, 63]
>>> print(lotto)
[2, 14, 26, 41, 63]
>>> lotto[2] = 28 --> We can change using the position .
>>> print(lotto)
[2, 14, 28, 41, 63]

mutable is a synonym of changable that you can change  for example strings are not immutable imagine change a string


-How-Long-is-a-List?-

*The "len()" function takes a "list" as a parameter and retursn the number of "elements" in the "list"


*Actually len() tells us the number of elements ofa ny set or sequence(such as a string...)


greet = 'Hello Bob'
print(len(greet)) --len(how many items are in the list)
x = [ 1, 2, 'joe', 99]
print(len(x))

///////////////
9
4


-Using-the-range-function-

*The "range" function "returns" a list of numbers that range from zero to one less than the "parameter"

*We can construct an index loop using "for" and an integer "iterator"


print(range(4))
friends =['Joseph', 'Glenn', 'Sally']
print(len(friends)) --> there are three frinds
print(range(len(friends))) --> the interesting thing is that 0 correspond to Joseph and so on. And specially when we are in an array and remember when are the position at.
///////////////////

[0, 1, 2, 3]
3
[0, 1, 2]

-A-tale-of-two-loops...-

friends = ['Joseph', 'Glenn', 'Sally'] 
for friend in friends : --> allows to find the iteration through --> this is better 'cause is prettier
    print('Happy New Year:', friend)

for i in range(len(friends)) : --> instead we could choose a vetter alternative using an our own that went through our positions and there are not gaps but are the same
    friend = friends[i]
    print('Happy New Year:', friend)

friends = ['Joseph', 'Glenn', 'Sally']
for friend in friends :
    print('Happy New Year:', friend)

print(len(friends))

print(range(len(friends))) --> no is the same input the answer is why [0,1,2]

/////////////////////////////////
Happy New Year Joseph
...

3

[0,1,2] ? ===> range(1,2)

-Loop-Operations-

-Concatenating lists using +-

*We can create a new list by adding two existing lists together 

a = [1, 2, 3]
b = [1, 2, 3]
c = a +b
print(c)
[1, 2, 3, 4, 5, 6]
print(a)
[1,2,3]

-Lists can be sliced using:-

*Remember: Just like in strings, the second number is " up to but not including"

t = [9, 41, 12, 3, 74, 15]-> Works the same as string but it could be a little tricky 
t[1:3]->1 but not inlcuding 3
t[:4]-> up to but not including  4
t[3:] ->3 up to the end
t[:] --> all the sliced

///////////////////////////////

[41, 3]
[9, 41, 12, 3]
[74, 15]
[9, 41, 3, 74, 15]

-List-Methods-

x = list()

print(type(x)) --> what type of data is?
print(dir(x)) --> to remind the functions of the type list and allows what we could do as pop, remove,etc.

////////////////////////

<class 'list'>
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']

-Building-a-List-from-Scratch-

*We can create an empty "list" and then add elements using the "append" method

*The "list" stays in order and new elements are "added" at the end of the "list"


stuff = list() --> we could use the square brackets but is like python is a form like a construct form and we say hey python make a list and techically is like a reservered list in python( and assign the variable in the stuff)
stuff.append('book')
stuff.append(99)
print(stuff)
stuff.append('cookie')
print(stuff)

///////////////////////

['book', 99]
['book', 99, 'cookie']

-Is-Somethin-in-a-List-?

*Python provides two "operators" that let you check if an item is in a list

*These are logical opeators that return True or False

*They do not modify the list



some = [1, 9, 21, 10, 16]

print(9 in some) --9 is in my list(some)
print(15 in some) --15 is in my list(some)
print(20 not in some) -- 20 is not in my list(some)

*The same works in the strings

////////////////////////////
True
False
True

-Lists are in Order-

*A "list" can hold many items and keeps those items in the order unitl we do something to change the order

*A "list" can be "sorted" (i.e, change its order)

*The "sort" method (unlike in stringss) means "sort yourself"

friends = ['Joseph', 'Glenn', 'Sally']
friends.sort()
print(friends)
print(friends[1])


*Remember that strings are not mutable but list are mutable

-Built-in-Functions-and-Lists-

*There are a number of "functions" built into "Python" that take "lists" as parameters

*Remember the loops we built? These are much simpler


nums = [3, 41, 12, 9, 74, 15]

print(len(nums)) --> how many items they are.

print(max(nums)) --> go and find the max in the list

print(min(nums)) --> find the smallest

print(sum(nums)) --> sum goes through and sum all up

print(sum(nums)/len(nums)) --> we could make the average and sum all of them and dividing by the len

///////////////////////////////////

6
74
3
154
25.6666666668

-Built-in-Functions-and-Lists-

*Generate with while True the average 

total = 0
count = 0
while True:
    inp = input('Enter a number: ')
    if inp == 'done' : break
    value = float(inp)
    total = total + value
    count = count + 1

average = total / count
print('Average:', average)

*Generate with while True the average with lists()

numlist = list() -- make an empty list and assign the empty list
while True : - while true
    inp = input('Ente a numer: ') -- create the number
    if inp == 'done' : break  -- if inp 'done' get out of the loop
    value = float(inp) ==
    numlist.append(value) -- each time will grew the list and will append it to the list

average = sum(numlist) / len(numlist)
print('Average:', average)


**There is a problem with one million numbers and all are going to start in the memory simultaneously  where in the first example is doing the calculation( and are not going to use so much memory)

///////////////////////////////


Numer: 2
Numer: 2
Number: 2
Numer:2
Numer:2
done
average: 3.0


-Strings vs Lists-

-Best Friends: Strings and Lists-

abc = 'With three words' - we have a string  but we have space and technically what string does is that is going to find every space and break the string in pieces and transforming the string in lists
stuff = abc.split() -- now .split() method works!!!
print(stuff) --give the list stuff
print(len(stuff))
print(stuff[0]) -- we could use find instead of using [0] the index braces

/////////////////////////////

['With', 'three', 'words']
3
With


for w in stuff:
    print(w)

/////////////////////////////

With
Three
words

**Split breaks a string into parts and produce a list of strings. We think of these as words. We can access a particular word or loop through all the words.

///////////////////////////

print("\n Another example")

line = 'A lot             of  spaces'
etc = line.split()
print(etc)

line = 'first;second;third'

thing = line.split()

print(thing)

print(len(thing))

thing = line.split(';')

print(thing)


print(len(thing))

//////////////////////////////////

*When you do not specify a "delimiter", multiple spacesare treated like on delimiter

*You can specify what "delimiter" character to use in the "splitting"

*There are other characters as tabs, space , new lines (widespace) are also qualified in split

print("\n Another example about the day of the week")

fhand = open('mbox-short.txt')-- open a file
for line in fhand: -- loop through the file
    line = line.rstrip() --rstrip() take the newlines
    if not line.startswith('From ') : continue -- if stat with 'From and space' will ignoring the others and..
    words = line.split() -- will split it 
    print(words[2]) -- will print the second word

--The-Double-Split-Pattern-

*Sometims we split a line one way, and then grab one of the pieces of the line and split that piece again

  0      1                         2    3   4   5         6 
From | stephen.marquard@uxt.ac.za|Sat| Jan |5 |09:14:16| 2008

words = line.split()
email = words[1] -- we take the number (1)
pieces = email.split('@') split with the '@' as ['stephen.marquard', 'uct.ac.za']
#And if only want to know the direction of the email is easy because his index is 1
print(pieces[1])

/////////////////////////
uxt.ac.za

##We could use also find()  but the example above is more a tipical example of how to use it.

-List-Summary-

*Concept of collection

*Lists and defninite loops

*Indexing and lookup

*List mutability

*Functions:len, min, max, sum

*Slicing lists

*List methods: append, remove

*Sorting lists

*Splitting strings into lists of words

*Usig split to parse strings

-Strings, Files, Lists & the Guardian Pattern-

han = open('mbox-short.txt')

for line in han:
    line = line.rstrip()
    wds = line.split()
    if wds[0] != 'from' :
        continue
    print(wds[2])

*You need to be careful with the traceback and how to fix the code

for line in han:
    line = line.rstrip()
    print('Line', line)
    wds = line.split()
    print('Words:',wds)

    # Guardian pattern
    if len(wds) < 1 : #this is a good way to debugging or printing the characteres
        continue
    if wds[0] != 'from' :
        print('Ignore')
        continue
    print(wds[2])

#Works clean


for line in han:
    line = line.rstrip()
    # print('Line', line)
    wds = line.split()
    # print('Words:',wds)

    # Guardian pattern
    if len(wds) < 1 :
        continue
    if wds[0] != 'From' : #This is the word that gave us the traceback
        # print('Ignore')
        continue
    print(wds[2])



for line in han:
    line = line.rstrip()
    print('Line', line)
    wds = line.split()
    if line == '':
        # print('Skip Blank')
        continue
    if wds[0] != 'from' :
        # print('Ignore')
        continue
    print(wds[2])



