--Regular Expressions--

In computing, a regular expression, also referred to as "regex" or "regexp", provides a concise and flexible means for matching strings of text, such as particular characters, words, or patterns of charactes. A regular epxression is written in a formal language that can be interpreted by a regular expression processor.

https://en.wikipedia.org/wiki/Regular_expression

#Really clever "wild card" expressions for matching and parsin strings

--Understanding Regular Expressions--

*Very powerful and quite cryptic
*Fun once you understand them
*Regular expressions are a language unto themselves
*A language of "marker characters" - programming with characters
*It is kind of an "old school" langauge - compact

http://xkcd.com/208/

--Regular Expression Quick Guide--

^ Mathces the beginning of a line
$ Matches the end of the line
. Mathces any character
\s Matches whitespace
\S Matches any non-whitespace character
* Repeats a character zero or more times
*? Repeats a character zero or more times (non-greedy)
* Repeats a character one or more times
+? Repeats a character one or more times (non-greedy)
[aeiou] Matches a single character in the listed set
[^XYZ] Matches a single character not in the listed set
[a-z0-9] The set of characters can include a range
( Indicates where string extracion is to start
) Indicates where string extraction is to end

https://www.py4e.com/lectures3/Pythonlearn-11-Regex-Handout.txt

--The Regular Expression Module--

*Before you can use regular expressions in your program, you must import the library using "import re"

*You can use re.search() to see if a string matches a regular expression, similar to using the find() method for strings

*You can use re.findall() to extract portions of a string that match your regular expression, similar to a combination of find() and slicing: var[5:10]

--Using re.search() like find()--

hand = open('mbox-short.txt')
for line in hand:
    line = line.rstrip()
    if line find('From:') >= 0:
       print(line)

import re
hand = open('mbox.short.txt')
for line in hand:
    line = line.rstrip()
    if line find('From:') >= 0:
       print(line)


--Using re.search() like startswith()--

hand = open('mbox-short.txt')
for line in hand:
    line = line.rstrip()
    if line.startswith('From:') :#We done printing the lins finding the lines from 
       print(line) 

.................................

import re

hand = open('mbox-short.txt')
for line in hand:
    line = line.rstrip()
    if re.search('^From:', line) :#start from the beginning of the line (^) and from at the begining(^) the difference betwen the first example is that we use a method in the string
       print(line)

#We fine-tine what is matched by adding special characters to the string

-Wild-Card characters -

*The dot character matches any character

*If you add teh asterisk character, the character is "any number of times"

X-Sieve : CMU Sieve 2.3(check)...
X-DSPAM-Result: Innocent ...
X-DSPAM-Confidence: 0.8475
X-Content-Type-Message-Body: text/plain


(Match the start of the line) ^X.(match any character) *(many times):  

--Fine-Tuning Your Match--
Depending on how "clean" your data is and the purpose of your application, you may want to narrow your match down a bit

X-Sieve : CMU Sieve 2.3 (match)
X-DSPAM-Result: Innocent(not-match becuase the followed colon and whitespace character)
X-Plane is behind schedule: two weeks(this is the match that really want) and the previous could work but if we add:)(doesn't match because the space)

(Match the start of the line) ^X-\S(Match any non-withespace character)+(one or more times) 

--From Matching to Extracting--

*re.serach() returns a True/False depending on whether the string matches the regular epxression

*If we actually want the matching strings to be extracted, we use re.findall()


import re
x = 'My 2 favorite numbers are 19 and 42' # stamp...(2) got it .... stamp(19) got it ... stamp(42) got it.
y = re.findall('[0-9]+',x)#there is one character that adds more ore one digits by thereself)
print(y)

........................

['2', '19', '42']#A list of three strings

[0-9]+ = a single digit(one or more digits)

--Matching and Extracting Data--

When we use re.findall(), it returns a list of zero or more sub-string that match the regular expressions.

import re
x = 'My 2 favorite numbers are 19 and 42' ..(no uppercase returns a string list)
y = re.findall('[0-9]+',x)
print(y)

y = re.findall('[AEIOU]+',x) -- one or more (AA, will match , EEE ,etc)
print(y)
.................................

['2', '19', '42']
[] # and give us a string of list

--Warning: Greedy Matching --
The repeat characters (* and +) push outward in both directions(greedy) to match the largets possible string
---------------------------------------
import re
x = 'From: Using the: character'
y = re.findall('^F.+:',x)
print(y)

"^F(first character in the match is an F).+(one or more characters):(last character in the match is a:)

---------------------------------------
['From: Using the:']

--Non-Greedy Matching--

Not all regular expression repeat codes are greedy!
If you add a ? character, the + and * chill out a bit...

import re
x = 'From: Using the: character'
y = re.findall('^F.+:',x)
print(y)

^F(first character in the match is an F).+?(one or more characters but not greedy):(last character in the match is a:)

--Fine-Tuning String Extraction--

You can refine the match for re.findall() and separately determine which portion of the match is to be extracted by using parentheses

From stephen.marquez@uct.ac.za Sat Jan 5 09:14:16 2008

print("\nFine-Tuning String Extraction\n")
x = 'From stephen.marquez@uct.ac.za Sat Jan 5 09:14:16 2008' #python make the separation with the '@' and tehcnically stops in the blank(_) and in the other side as well.
y = re.findall('\S+@\S+',x)

\S+(at least one non-whitespace character)@\S+(at least one non-whitespace character)
...............................................

['stephen.marquez@uct.ac.za']

Parentheses are not part of the match - but they  tell where to start and stop what string to extract.

x = 'From stephen.marquez@uct.ac.za Sat Jan 5 09:14:16 2008' #python tells that starts from ^From and thankfully for the parenthesis
y = re.findall('^From (\S+@\S+)',x)
print(y)

...............................................

['stephen.marquez@uct.ac.za']

--String Parsing --

From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008

data = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'
atpos = data.find('@')#count the words until the '@'
print(atpos) #print it the until the letter '@' each string
sppos = data.find(' ',atpos)# and after until one space
print(sppos)
host = data[atpos+1 : sppos]# we stract beyond the atpos +1 so is not going to add '@'(21) only 22 until the sppos
print(host)

*Extracting a host name -using find and string slicing
...............................................

21
31
uct.ac.za

--The-Double Split Pattern--

Sometimes we split a line one way, and then grab one of the pieces of the line and split that piece again

line = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'
       [0]  |     [1]                |[2]|[3]|[4]|[5]|     [6]
            | [0] | [1]              |
words = line.split() # we split the lines with split of each space
email = words[1]# we add the string 1
pieces = email.split('@') and we split instead with withespace with the 
'@'
print(pieces[1])


--The-Regex Version--

print("\nThe Regex Version\n")
lin = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'#look at the '@' and match no-black character not a blank and match any of them and will be one list that we looking for
y = re.findall('@([^ ]*)',lin)
print(y)

'@(look through the string until you find an at sign)([^ ](Match non-blank character)*(Match many of them))'
----------------------
['uct.ac.za']

--Even Cooler Regex Version--

lin = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'
y = re.findall('^From.*@([^ ]*)',lin)#this is better becuae we could match any string easy
print(y)

^(Starting at the beginning of hte line)From(look for the string 'From').*@([^ ]*)
----------------------------
['uct.ac.za']
['uct.ac.za']

--Escape Character--

If you want a special regular expression to just behave normally(most of the time) you prefix it with '\'

import re
x = 'We just received $10.00 for cookies.'
y = re.findall('\$[0-9.]+',x)
print(y)

\$(A real dollar sign)[0-9.](A digit or period)+(At least one or more)
...................................
['$10.00']

--Summary--

*Regular expressions are a cryptic but powerful language for matching strings and extracting elements from those strings.

*Regular expressions have special characters that indicate intent

--Sockets in Python--

* Python has built-in support for TCP Sockets

import socket #we import the library socket
mysock  = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #we make our variable a socket function, socket..A..(we are going to make a socket across the internet, adn a stream socket(a series of blocks comes an another and theres another kind to deal with)
mysock.connect( ('data.pr4e.org(host)', 80(port)) ) # A socket object that we are going to make a connection across the internet and make the phone call(80)

--Applications Protocols--

* Since TCP (and Python) gives us a reliable socket, what do we want to do with the socket? What problem do we want to solve?

* Application Protocols

 * Mail

 * World Wide Web

--HTTP - Hypertext Transfer Protocol --

* The domaint Application Layer Protocol on the Internet

* Invented for the Web - to Retrieve HTML, Images, Documents, etc

* Extended to be data in addition to documents - RSS, Web Services, etc.. Basic Concept - Make a Connection - Request a document - Retrieve the Document - Close the Connection.

--HTTP--

The HyperText Transfer Protocol is the set of rules to allow browsers to retrieve web documents from servers over the Internet

http://www.dr-chuck.com/page1.htm
[protocol]|[host]|[document]

--Getting Data From The Server--

* Each the user clicks on an anchor tag with an href= value to switch to a new page, the browser makes a connection to the web server and issues a "GET" request -to GET the content of the page at the specified URL

* The server returns the HTML document to the Browser which formats and displays the document to the user
