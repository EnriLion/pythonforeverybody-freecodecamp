--Networked Programs--

--Transport Control Protocol(TCP)--

* Built on top of IP(Internet Protocol)

* Assumes IP might lose some data - stores and retransmits data if it seems to be lost

* Handles "flow control" using a transmit window

* Provides a nice reliable pipe


--TCP Connections/ Sockets--

"In computer networking, and Internet socket or network socket is an endpoint of a bidirectional inter-process communication flow across an Internet Protocol-based computer network, such as the Internet"

Process --- Internet --- Process

(Browser)               (Web-server(apache))


--TCP Port Numbers--

* A port is an application-specific or porcess-specific software communcations endpoint

* It allows multiple networked applications to coexist on the same server

*There is a list of well-known TCP port numbers


--Common TCP Ports--

* Telnet(23) - Login

* SSH(22) - Secure Login

* HTTP(80)

* HTTPS(443) - Secure

* SMTP(25) (Mail)

* IMAP(143/220/993) - Mail Retrieval

* POP(109/110) - Mail Retrieval 

* DNS(53) - Domain Name

* FTP(21) - File Transfer


--Sockets in Python --
----------------------
$ telnet www.dr-chuck.com 80 #we connect through the web server with the browser

--Accurate Hacking movies?---

http://nmap.org/movies.html

#Use command line and known about it

--Write-a-Web-Browser--

-An HTTP Request in Python-

-Characters and Strings-

ASCII(American Standard Code for Information Interchange)

The characters that are in the West is telling us as the keys and 0 and are a lot of values(string uses in python)

This are 8-bits(byte)

-Representing Sumple Strings-

*Each character is represented by a number between 9 and 256 stored in 8 bits of memory

*We refere to "8 bits of memory as a "byte" of memory -(i-r my disk drive contains 3 Terabytes of memory)

*The ord() function tells us  the numeric value of a simple ASCIII character

Cheat-Sheet ASCII
https://catonmat.net/ftp/ascii-cheat-sheet.png

-Multi-Byte Characters-

*To present the wide range of characters computers with more than one byte

* UTF-16 - Fixed Length - Two bytes 

* UTF-32 - Fixed Length - Four bytes 

* UTF-8 - 1-4 bytes *(data commonly moved)

 * Upwards compatible with ASCII - 1 Byte
 * Automatic detection between ASCII and UTF-8
 * UTF-8 is recommended practice for encoding data to be exchanged between systems

-Two-Kinds-of-Strings-in-Python-

*The python version 2 and the python verison 3 has his own differences

-Python3-and-Unicode-

*In Python3, all strings internally are UNICODE

*Working with string variables in Python programs and reading data from files usually "just works"

*When we talk to a network resource using sockets or talk to a database we have to encode and deocde data (usually to UTF-8)

print("\n")
x = b'abc'
print(type(x))
x = '書簡'
print(type(x))
x = u'書簡'
print(type(x))

///////
<class 'bytes'>
<class 'str'>
<class 'str'>

-Python-Strings-to-Bytes-

*When we talk to an external resource like a network socket we sends bytes, so we need to encode Python 3 strings into a given character encoding

*When we read data from an external resource, we must decode it based on the caracter set so its properly repersented in Python 3 as a string.

About bytes.decode:

read the documentation

https://docs.python.org/3/library/stdtypes.html?highlight=bytes%20decode#bytes.decode

About str.encode:

read the documentation

https://docs.python.org/3/library/stdtypes.html?highlight=str%20encode#str.encode
